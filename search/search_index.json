{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Teal is a versatile and user-friendly API designed to simplify working with PDF documents. Whether you're a developer looking to automate PDF processing or integrate PDF functionalities into your existing workflow, Teal provides a seamless and efficient solution.</p> <p>For the source code, see https://github.com/rueedlinger/teal.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Digitize documents to searchable PDF or archivable PDF/A.</li> <li>Extract metadata, text, and tables as structured data.</li> <li>Convert different document types to PDF.</li> <li>Convert PDFs to PDF/A.</li> <li>Check PDF/A compliance.</li> </ul>"},{"location":"#understanding-different-types-of-pdfs","title":"Understanding Different Types of PDFs","text":"<p>Digitally Created PDFs:</p> <ul> <li>Created using software like Microsoft Word or Excel, or via the \"print\" function within applications.</li> <li>Contains text and images with electronic character designation.</li> <li>Text and images can be easily edited, searched, and manipulated.</li> </ul> <p>Image-only PDFs:</p> <ul> <li>Generated from scanned hard copy documents or images.</li> <li>Content is locked in a snapshot-like image without a text layer.</li> <li>Not searchable or editable without OCR (Optical Character Recognition).</li> </ul> <p>Searchable PDFs:</p> <ul> <li>Result from applying OCR to scanned or image-based documents.</li> <li>Have a text layer added underneath the image layer, making them fully searchable.</li> <li>Text can be selected, copied, and marked up like in original documents.</li> </ul>"},{"location":"#alternatives","title":"Alternatives","text":"<p>Here are some alternatives to Teal:</p> <ul> <li>Gotenberg converts documents with LibreOffice and Chromium to PDF.</li> <li>OCRmyPDF is designed to be used as a command line tool, but it can be   used in a web service.</li> <li>Paperless-ngx is a community-supported open-source document management system.</li> </ul>"},{"location":"api/","title":"REST API","text":""},{"location":"api/#pdf","title":"PDF","text":"<ul> <li>Extracts text from a digital PDF.</li> <li>Extracts text from an image-only PDF or a digital PDF using OCR.</li> <li>Extracts tables as JSON from a digital PDF.</li> <li>Extracts metadata from a PDF.</li> </ul>"},{"location":"api/#pdftext","title":"/pdf/text","text":"<p>This multipart/form-data route extracts text from a digital PDF.</p> <pre><code>POST /pdf/text\n</code></pre> <p>Form Filed (multipart/form-data)</p> Key Description file The PDF from which to extract text. <p>Query Parameters</p> Parameter Type Values Description pages <code>Array[String]</code> selection <code>1,2,3</code> or ranges <code>1-8</code> or combined <code>1,2,5-6</code> The pages to extract <p>Examples</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdf/text?pages=1' \\\n  -F 'file=@../tests/data/digital_pdf/loadtest.pdf' \n</code></pre>"},{"location":"api/#pdfocr","title":"/pdf/ocr","text":"<p>This multipart/form-data route extracts text with OCR from a scanned or digital PDF.</p> <pre><code>POST /pdf/ocr\n</code></pre> <p>Form Filed (multipart/form-data)</p> Key Description file The PDF from which to extract text. <p>Query Parameters</p> Parameter Type Values Description pages <code>String</code> selection <code>1,2,3</code> or  ranges <code>1-8</code> or combined <code>1,2,5-6</code> The pages to extract languages <code>Array[String]</code> <code>eng, fra, deu, ...</code> The tesseract languages used for the OCR text extraction <p>Examples</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdf/ocr?pages=1&amp;languages=deu&amp;languages=eng' \\\n  -F 'file=@../tests/data/digital_pdf/loadtest.pdf' \n</code></pre>"},{"location":"api/#pdftable","title":"/pdf/table","text":"<p>This multipart/form-data route extracts tables from a digital PDF.</p> <pre><code>POST /pdf/table\n</code></pre> <p>Form Filed (multipart/form-data)</p> Key Description file The PDF from which to extract text. <p>Query Parameters</p> Parameter Type Values Description pages <code>String</code> selection <code>1,2,3</code> or  ranges <code>1-8</code> or combined <code>1,2,5-6</code> The pages to extract <p>Examples</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdf/table?pages=1' \\\n  -F 'file=@../tests/data/digital_pdf/document_with_one_table.pdf' \n</code></pre>"},{"location":"api/#pdfmeta","title":"/pdf/meta","text":"<p>This multipart/form-data route extracts metadata (docinfo &amp; xmp) from a PDF.</p> <pre><code>POST /pdf/meta\n</code></pre> <p>Form Filed (multipart/form-data)</p> Key Description file The PDF from which to extract text."},{"location":"api/#pdfa","title":"PDF/A","text":"<ul> <li>Converts a PDF to PDF/A (PDF/A-1B, PDF/A-2B or PDF/A-3B) with OCR.</li> <li>Validates a PDF against the PDF/A standard.</li> </ul> <p>Examples</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdf/meta' \\\n  -F 'file=@../tests/data/digital_pdf/loadtest.pdf' \n</code></pre>"},{"location":"api/#pdfaconvert","title":"/pdfa/convert","text":"<p>This multipart/form-data route converts a PDF to PDF/A.</p> <pre><code>POST /pdfa/convert\n</code></pre> <p>Form Filed (multipart/form-data)</p> Key Description file The PDF from which to extract text. <p>Query Parameters</p> Parameter Type Values Description pages <code>String</code> selection <code>1,2,3</code> or  ranges <code>1-8</code> or combined <code>1,2,5-6</code> The pages to extract languages <code>Array[String]</code> <code>eng, fra, deu, ...</code> The tesseract languages used for the OCR text extraction ocr <code>Enum</code> <code>skip-text, force-ocr, redo-ocr</code> <code>skip-text</code> will not run OCR on pages with text. <code>foce-ocr</code> will run OCR on all pages. <code>redo-ocr</code> will categorized text as either visible or invisible.  Invisible text (OCR) is stripped out and and any additional text is inserted as OCR profile <code>Enum</code> <code>pdfa-1b, pdfa-2b, pdfa-3b</code> The profile to export to. <p>Examples</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdfa/convert?pages=1&amp;languages=eng&amp;ocr=skip-text&amp;profile=pdfa-3b' \\\n  -F 'file=@../tests/data/digital_pdf/loadtest.pdf' \\\n  -o pdfa.pdf\n</code></pre>"},{"location":"api/#pdfavalidate","title":"/pdfa/validate","text":"<p>This multipart/form-data route validates a PDF against different PDF/A profiles.</p> <pre><code>POST /pdfa/validate\n</code></pre> <p>Form Filed (multipart/form-data)</p> Key Description file The PDF to validate against the PDF/A profiles.. <p>Query Parameters</p> Parameter Type Values Description profile <code>Enum</code> <code>1a, 1b, 2a, 2b, 3a, 3b, 3u, 4, 4e, 4f, ua1, ua2</code> <p>Examples</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdfa/validate?profile=3b' \\\n  -F 'file=@../tests/data/digital_pdf/loadtest.pdf'\n</code></pre>"},{"location":"api/#libreoffice","title":"LibreOffice","text":"<ul> <li>Converts a LibreOffice document to PDF (supported profiles: PDF 1.5, PDF 1.6, PDF 1.7,   PDF/A-1B, PDF/A-2B or PDF/A-3B).</li> </ul>"},{"location":"api/#libreofficeconvert","title":"/libreoffice/convert","text":"<p>This multipart/form-data route validates a PDF against different PDF/A profiles.</p> <pre><code>POST /libreoffice/convert\n</code></pre> <p>Form Filed (multipart/form-data)</p> Key Description file The document to convert to pDF or PDF/A. <p>Query Parameters</p> Parameter Type Values Description pages <code>String</code> selection <code>1,2,3</code> or  ranges <code>1-8</code> or combined <code>1,2,5-6</code> The pages to extract profile <code>Enum</code> <code>pdfa-1b, pdfa-2b, pdfa-3b, pdf-1.5, pdf-1.6, pdf-1.7</code> The profile teh document to convert to <p>Examples</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/libreoffice/convert?profile=pdf-1.6' \\\n  -F 'file=@../tests/data/doc/text_document.txt' \\\n  -o mypdf.pdf\n</code></pre>"},{"location":"developer_guide/","title":"Developer Guide","text":""},{"location":"developer_guide/#python","title":"Python","text":""},{"location":"developer_guide/#install-python-3120-using-pyenv","title":"Install Python 3.12.0 Using pyenv","text":"<p>This command will download and install Python version 3.12.0. Pyenv is a popular tool for managing multiple versions of Python on a single system.</p> <pre><code>pyenv install 3.12.0\n</code></pre>"},{"location":"developer_guide/#create-a-virtual-environment-named-teal","title":"Create a Virtual Environment Named 'teal'","text":"<p>This command will create a virtual environment using the Python version 3.12.0 that was just installed. Virtual environments are useful for managing project-specific dependencies.</p> <pre><code>pyenv virtualenv 3.12.0 teal\n</code></pre>"},{"location":"developer_guide/#activate-the-virtual-environment-teal","title":"Activate the Virtual Environment 'teal'","text":"<p>Activating the virtual environment ensures that any Python commands run will use the packages and interpreter from the ' teal' environment.</p> <pre><code>pyenv activate teal\n</code></pre>"},{"location":"developer_guide/#install-dependencies-from-requirementstxt","title":"Install Dependencies from requirements.txt","text":"<p>This command will install all the necessary packages listed in the requirements.txt file. This file typically contains a list of all the Python packages required for the project.</p> <pre><code>pip install -r requirements.in\n</code></pre>"},{"location":"developer_guide/#update-dependencies","title":"Update Dependencies","text":"<p>To update the dependencies, first modify the <code>requirements.in</code> file with the desired package versions or additions. Then, run the following command to generate an updated requirements.txt file:</p> <pre><code>pip-compile --output-file=requirements.txt\n</code></pre> <p>This will ensure that the requirements.txt file is synchronized with the changes made in requirements.in.</p> <p>Note: pip-compile is a tool from the pip-tools package. If you don't have it installed, you can add it using pip install pip-tools. For more information, visit the pip-tools documentation.</p>"},{"location":"developer_guide/#install-binaries","title":"Install Binaries","text":"<p>The easiest way is just to run the app inside the Docker container. This approach ensures that all necessary binaries are included and configured correctly without needing to manage them manually on your local system. Docker containers provide a consistent and isolated environment, which helps avoid issues related to different operating systems or library versions.</p> <p>The following binaries (debian packages) are needed:</p> <ul> <li>tesseract-ocr</li> <li>tesseract-ocr-eng (and additional required languages)</li> <li>poppler-utils</li> <li>ocrmypdf</li> <li>ghostscript</li> <li>python3-tk</li> <li>libgl1</li> <li>libreoffice (bookworm-backports)</li> <li>libreoffice-java-common (bookworm-backports)</li> <li>default-jre-headless</li> </ul> <p>The following binaries must be installed manually:</p> <ul> <li>verapdf</li> </ul> <p>For more details have a look at the Dockerfile.</p>"},{"location":"developer_guide/#startup-the-fastapi-app","title":"Startup the FastAPI app","text":"<p>This will start the FastAPI app. BUT Some APIs within the FastAPI application may depend on external binaries or system packages. Make sure these dependencies are installed and properly configured on your system. For instance, if an API endpoint requires tesseract or libreoffice, these binaries must be available in your system's PATH.</p> <pre><code>uvicorn teal.api:app --reload\n</code></pre>"},{"location":"developer_guide/#docker","title":"Docker","text":""},{"location":"developer_guide/#starting-the-app-with-docker-compose","title":"Starting the App with Docker Compose","text":"<p>To start up the whole app with all libraries and binaries, just build and run the container with Docker Compose. This approach ensures that the entire application, including all dependencies and necessary binaries, is consistently and reliably set up in a containerized environment.</p> <p>To build and run the container, use the following command</p> <pre><code>docker compose up --build\n</code></pre>"},{"location":"developer_guide/#unitintegration-testing","title":"Unit/Integration Testing","text":"<p>To run pytest inside the Docker container, set the environment variable <code>TEAL_TEST_MODE=true</code>. If you need to pass arguments to pytest, you can use the <code>TEAL_PYTEST_ARGS</code> environment variable.</p> <p>To run pytest without additional arguments, use the following command:</p> <pre><code>docker compose run --build --name teal_pytest \\\n  --rm -e TEAL_TEST_MODE=true teal\n</code></pre> <p>If you need to pass arguments to pytest, set the <code>TEAL_PYTEST_ARGS</code> environment variable. For example, to run tests in verbose mode, you can use:</p> <pre><code>docker compose run --build --name teal_pytest \\\n  --rm -e TEAL_TEST_MODE=true -e TEAL_PYTEST_ARGS=\"-v\" teal\n</code></pre>"},{"location":"developer_guide/#load-testing","title":"Load Testing","text":"<p>You can run the load test locally or inside a Docker container.</p>"},{"location":"developer_guide/#locally","title":"Locally","text":"<p>The following command will start the load test with Locust. Note that the application must be running on port 8000 when you start the load test.</p> <pre><code>locust --host http://localhost:8000 --users 5 -t 10m \\\n  --autostart -f tests/locustfile.py\n</code></pre> <p>You can view the results with the Locust web UI at http://0.0.0.0:8089/.</p>"},{"location":"developer_guide/#inside-docker","title":"Inside Docker","text":"<p>The following command will start the Locust web UI inside the Docker container:</p> <pre><code>docker compose run --build --rm -p 8089:8089 -p 8000:8000 \\\n  -e TEAL_START_LOCUST=true teal\n</code></pre> <p>The -e <code>TEAL_START_LOCUST=true</code> environment variable signals the container to start Locust.</p> <p>You can now start the load test from the Locust web UI, accessible at http://0.0.0.0:8089/. To begin, navigate to this URL in your web browser. From the interface, you can configure various test parameters such as the number of users, spawn rate, and duration of the test. Once your settings are in place, click the \"Start\" button to initiate the load test. As the test runs, you can monitor real-time performance metrics and view detailed statistics on response times, failure rates, and other key indicators. This will help you assess the performance and stability of your application under load.</p>"},{"location":"developer_guide/#result","title":"Result","text":"<p>The test was performed on a MacBook Pro (2023 model, Apple M2 Max, 64GB RAM). Docker settings were configured with a memory limit of 16GB and a CPU limit of 12 cores. Please note that the results obtained from this test may vary based on differences in hardware and software configurations in your setup.</p> <p>The following load test was conducted with 5 user for a duration of 10 minutes. The test configuration included 1 worker with a timeout of 120 seconds. The PDF document used for all test has a size of 17 KB (16'873 bytes, one page).</p> Type Name # Requests # Fails Median (ms) 95%ile (ms) 99%ile (ms) Average (ms) Min (ms) Max (ms) Average size (bytes) Current RPS Current Failures/s POST /libreoffice/convert 191 0 4600 8800 10000 4766.63 500 12394 21297 0.2 0 POST /pdf/ocr 209 0 1400 2600 2800 1509.29 684 3499 635 0.5 0 POST /pdf/table 212 0 1300 2400 2600 1370.22 558 2955 2 0.1 0 POST /pdf/text 223 0 780 2000 2300 783.64 2 2740 654 0.4 0 POST /pdfa/convert 197 0 4600 9300 11000 4845.74 305 11176 21436 0.2 0 POST /pdfa/validate 213 0 1500 2500 3000 1522.62 767 3499 171 0.5 0 Aggregated 1245 0 1600 6900 9500 2385.57 2 12394 6912.47 1.9 0"},{"location":"getting_started/","title":"Getting Started","text":"<p>Teal has two modes:</p> <ul> <li>APP mode will run the teal app. In app mode you can also start up the Locust webui.</li> <li>TEST mode will run the tests and print the result to stdout.</li> </ul>"},{"location":"getting_started/#running-teal-in-app-mode","title":"Running Teal in App Mode","text":"<p>Here's a quick example of how easy it is to work with Teal:</p> <pre><code>docker run --pull=always --rm -it -p 8000:8000 \\\n  --name teal ghcr.io/rueedlinger/teal:latest\n</code></pre> <p>Next you can use the api with the openapi ui.</p> <ul> <li>http://localhost:8000/docs</li> </ul>"},{"location":"getting_started/#examples","title":"Examples","text":""},{"location":"getting_started/#extract-text-from-a-pdf","title":"Extract Text From a PDF","text":"<p>This endpoint will extract the text from a digital PDF.</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdf/text' \\\n  -F 'file=@../tests/data/digital_pdf/loadtest.pdf;type=application/pdf'\n</code></pre> <p>The response might look like this:</p> <pre><code>[\n  {\n    \"page\": 1,\n    \"text\": \"Lorem ipsum\"\n  }\n]\n</code></pre>"},{"location":"getting_started/#extract-text-with-ocr-from-a-pdf","title":"Extract Text With OCR From a PDF","text":"<p>This endpoint extracts text from an image-only PDF or a digital PDF using the default language (English).</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdf/ocr?languages=eng' \\\n  -F 'file=@../tests/data/ocr/scanned_document.pdf'\n</code></pre> <p>The extracted text from the PDF might look like the following response:</p> <pre><code>[\n  {\n    \"page\": 1,\n    \"text\": \"Lorem ipsum\"\n  }\n] \n</code></pre>"},{"location":"getting_started/#extract-table-from-a-pdf","title":"Extract Table From a PDF","text":"<p>This endpoint extracts tables as JSON from a digital PDF.</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdf/table' \\\n  -F 'file=@../tests/data/digital_pdf/document_with_one_table.pdf'\n</code></pre> <p>The response might look like this:</p> <pre><code>[\n  {\n    \"page\": 1,\n    \"index\": 0,\n    \"table\": [\n      {\n        \"0\": \"A\",\n        \"1\": \"B\",\n        \"2\": \"C\"\n      },\n      {\n        \"0\": \"A1\",\n        \"1\": \"B11\",\n        \"2\": \"C111\"\n      },\n      {\n        \"0\": \"A2\",\n        \"1\": \"B22\",\n        \"2\": \"C222\"\n      },\n      {\n        \"0\": \"A3\",\n        \"1\": \"B33\",\n        \"2\": \"C333\"\n      }\n    ]\n  }\n]%\n</code></pre>"},{"location":"getting_started/#extract-metadata-from-a-pdf","title":"Extract Metadata From a PDF","text":"<p>This endpoint extracts metadata from a PDF.</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdf/meta' \\\n  -F 'file=@../tests/data/digital_pdf/loadtest.pdf'\n</code></pre> <p>The extracted metadata from the PDF might look like the following response:</p> <pre><code>{\n  \"fileName\": \"loadtest.pdf\",\n  \"fileSize\": 16873,\n  \"pdfVersion\": \"1.3\",\n  \"pdfaClaim\": null,\n  \"pages\": 1,\n  \"docInfo\": {\n    \"/Author\": \"foo\",\n    \"/CreationDate\": \"D:20240602153930Z00'00'\",\n    \"/Creator\": \"Word\",\n    \"/ModDate\": \"D:20240602153930Z00'00'\",\n    \"/Producer\": \"macOS Version 14.5 (Build 23F79) Quartz PDFContext\",\n    \"/Title\": \"Document1\"\n  },\n  \"xmp\": {}\n}\n</code></pre>"},{"location":"getting_started/#convert-pdf-to-pdfa-with-ocr","title":"Convert PDF To PDF/A With OCR","text":"<p>This endpoint converts a PDF to PDF/A. If the PDF is a scanned image, OCR is used with the default language (English). The languages correspond to the Tesseract language codes.</p> <pre><code>curl -X 'POST' --output pdfa.pdf \\\n  'http://127.0.0.1:8000/pdfa/convert?languages=eng&amp;?profile=pdfa-3' \\\n  -F 'file=@../tests/data/digital_pdf/loadtest.pdf'\n</code></pre> <p>The output is a PDF/A file.</p>"},{"location":"getting_started/#validate-pdfa","title":"Validate PDF/A","text":"<p>This endpoint validates a PDF against the PDF/A standard.</p> <pre><code>curl -X 'POST' \\\n  'http://127.0.0.1:8000/pdfa/validate' \\\n  -F 'file=@../tests/data/pdfa/pdfa_2b.pdf'\n</code></pre> <p>This will generate an output like this:</p> <pre><code>{\n  \"profile\": \"PDF/A-2B\",\n  \"statement\": \"PDF file is compliant with Validation Profile requirements.\",\n  \"compliant\": true,\n  \"details\": {\n    \"passedRules\": 143,\n    \"failedRules\": 0,\n    \"passedChecks\": 400,\n    \"failedChecks\": 0,\n    \"ruleSummaries\": []\n  }\n}\n</code></pre>"},{"location":"getting_started/#convert-libreoffice-documents-to-pdf","title":"Convert LibreOffice Documents to PDF","text":"<p>This endpoint converts a LibreOffice document to PDF (version 1.6).</p> <pre><code>curl -X 'POST' --output pdf.pdf \\\n  'http://127.0.0.1:8000/libreoffice/convert?profile=pdf-1.6' \\\n  -F 'file=@../tests/data/doc/text_document.txt'\n</code></pre> <p>The output is a PDF document.</p>"},{"location":"getting_started/#running-teal-in-test-mode","title":"Running Teal in Test Mode","text":"<p>Teal is packed with unit and integration tests, you just need to set the environment varaible <code>TEAL_TEST_MODE=true</code>. These tests can be run and verified with teh following command.</p> <pre><code>docker run --pull=always --rm -it -p 8000:8000 \\\n  -e TEAL_TEST_MODE=true --name teal ghcr.io/rueedlinger/teal:latest\n</code></pre>"},{"location":"getting_started/#starting-teal-with-locust-load-testing","title":"Starting Teal with Locust (Load Testing)","text":"<p>Teal also includes Locust load tests, you just need to set the environment variable <code>TEAL_START_LOCUST=true</code>. The following command will start the Locust web UI inside the Docker container.</p> <pre><code>docker run --pull=always --rm -it -p 8089:8089 -p 8000:8000 \\\n  -e TEAL_START_LOCUST=true --name teal ghcr.io/rueedlinger/teal:latest\n</code></pre> <p>You can now start the load test from the locust webui http://localhost:8089/.</p>"},{"location":"releases/","title":"Releases","text":"<p>All available releases are listed here:</p> <ul> <li>https://github.com/rueedlinger/teal/releases</li> </ul>"},{"location":"releases/#versions","title":"Versions","text":"Version Docker Description <code>main</code> <code>ghcr.io/rueedlinger/teal:main</code> main branch version <code>latest</code> <code>ghcr.io/rueedlinger/latest:main</code> Latest release <code>v{MAJOR}.{MINOR}.{PATCH}</code> <code>ghcr.io/rueedlinger/teal:v{MAJOR}.{MINOR}.{PATCH}</code> For a full list of releases see Teal releases <p>These are the available releases and their corresponding Docker images for the 'teal' project.</p>"},{"location":"releases/#libraries-and-binaries-used-in-teal","title":"Libraries and Binaries Used in Teal","text":"<p>Teal uses other open-source libraries and provides this functionality through convenient APIs.</p> <p>A list of used libraries and brines can be queried over the <code>/app/info</code> endpoint.</p> <pre><code>curl localhost:8000/app/info\n</code></pre> <p>Docker Base Image</p> <p>Currently <code>python:3.12</code> is used as Docker base image.</p> <p>Python Libraries:</p> <p>The following python packages are defined in the requirements.in file.</p> <pre><code>fastapi\nprometheus-fastapi-instrumentator\npython-multipart\nuvicorn\ngunicorn\npyyaml\npypdfium2\npytesseract\npdf2image\ncamelot-py\n# needed by camelot-py\nghostscript\n# needed by camelot-py\nopencv-python\nPyPDF2\npytest\npytest-cov\nlocust\nblack\n</code></pre> <p>You can generate the full list of dependencies with <code>pip-compile</code> ( see pip-compile). This will generate the requirements.txt with all dependencies.</p> <p>Binaries:</p> <p>The following binaries (debian packages) are needed:</p> <ul> <li>tesseract-ocr</li> <li>tesseract-ocr-eng (and additional required languages)</li> <li>poppler-utils</li> <li>ocrmypdf</li> <li>ghostscript</li> <li>python3-tk</li> <li>libgl1</li> <li>libreoffice</li> <li>libreoffice-java-common</li> <li>default-jre-headless</li> </ul> <p>For more details have a look at the Dockerfile.</p>"},{"location":"releases/#known-issues","title":"Known Issues","text":""},{"location":"releases/#extract-tables-pdftable-ignoring-wrong-pointing-object","title":"Extract Tables (/pdf/table ) - Ignoring wrong pointing object","text":"<p>The following warning is displayed when extracting tables from a PDF. The extraction works, but this warning is displayed:</p> <pre><code>pypdf._reader - WARNING - Ignoring wrong pointing object 6 0 (offset 0)\n</code></pre> <p>This warning typically indicates that the PyPDF library encountered an object in the PDF that it couldn't interpret correctly. Despite this, the extraction process completes successfully. This warning may not impact the extracted data but suggests that there might be some issues with the PDF's structure or content.</p>"},{"location":"releases/#metrics-cpu-and-mem-metrics-not-available-with-multiworker","title":"Metrics - CPU and MEM metrics not available with multiworker","text":"<p>This is unrelated to trallnag/prometheus-fastapi-instrumentator. The official Prometheus client library for Python does not include these metrics when multi process mode is enabled.</p> <p>see https://github.com/trallnag/prometheus-fastapi-instrumentator/issues/207</p>"},{"location":"user_guide/","title":"User Guide","text":""},{"location":"user_guide/#running-teal","title":"Running Teal","text":"<p>Here's a quick example of how easy it is to work with Teal directly with docker</p> <pre><code>docker run --pull=always --rm -it -p 8000:8000 -e TEAL_WORKERS=1 \\\n  --name teal ghcr.io/rueedlinger/teal:latest\n</code></pre> <p>or start Teal inside docker compose.</p> <pre><code>services:\n  teal:\n    image: ghcr.io/rueedlinger/teal:latest\n    ports:\n      - 8000:8000 # Rest API port \n      - 8089:8089 # Locust web ui port\n    environment:\n      TEAL_LOG_CONF: \"log_conf.yaml\"\n      # TEAL_WORKERS: 1\n      # TEAL_WORKERS_TIMEOUT: 90\n      TEAL_PORT: 8000\n      # TEAL_IP_BIND: 0.0.0.0\n      # TEAL_START_LOCUST: 'true'\n</code></pre>"},{"location":"user_guide/#openapi-documentation","title":"OpenAPI Documentation","text":"<p>Explore the comprehensive OpenAPI documentation for the API at the following links:</p> <ul> <li>http://localhost:8000/docs</li> <li>http://localhost:8000/openapi.json</li> </ul> <p>These resources provide detailed information about the endpoints, request parameters, and response formats.</p>"},{"location":"user_guide/#configuration","title":"Configuration","text":""},{"location":"user_guide/#environment-variables","title":"Environment Variables","text":"ENV Default Description TEAL_LOG_CONF log_conf.yaml The python logging conf yaml file. TEAL_WORKERS 1 The number of worker processes. Number of recommended workers is 2 x number_of_cores + 1. TEAL_WORKERS_TIMEOUT 120 Worker timeout in seconds. TEAL_PORT 8000 Bind socket to this port TEAL_IP_BIND 0.0.0.0 Bind socket to this host. TEAL_START_LOCUST false When set to to <code>true</code>, the locust will be started. The web ui can be accessed on port 8089."},{"location":"user_guide/#logging","title":"Logging","text":"<p>With <code>TEAL_LOG_CONF</code> environment variable to can specif a logging configuration yaml file for Teal.</p> <pre><code>version: 1\ndisable_existing_loggers: False\n\nformatters:\n  simple:\n    format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    datefmt: '%Y-%m-%d %H:%M:%S'\n\nhandlers:\n  console:\n    class: logging.StreamHandler\n    formatter: simple\n    stream: ext://sys.stdout\n\n  # file:\n  #    class: logging.FileHandler\n  #    formatter: simple\n  #    filename: myapp.log\n  #    mode: a\n\nloggers:\n  teal:\n    level: INFO\n    handlers: [ console ]\n    propagate: yes\n  uvicorn.error:\n    level: INFO\n    handlers: [ console ]\n    propagate: no\n  uvicorn.access:\n    level: INFO\n    handlers: [ console ]\n    propagate: no\n\nroot:\n  handlers: [ console ]\n  level: WARN\n</code></pre>"},{"location":"user_guide/#feature-flags","title":"Feature Flags","text":"<p>You can disable different features in Teal with the env <code>TEAL_FEATURE_&lt;PATH&gt;</code>. For example to disable the libreoffice endpoint path (<code>/libreoffice/convert</code>) you can set <code>TEAL_FEATURE_LIBREOFFICE_CONVERT=false</code>.</p> <p>Currently, there are the following feature flags:</p> <ul> <li>TEAL_FEATURE_PDF_TEXT</li> <li>TEAL_FEATURE_PDF_OCR</li> <li>TEAL_FEATURE_PDF_TABLE</li> <li>TEAL_FEATURE_PDFA_CONVERT</li> <li>TEAL_FEATURE_PDFA_VALIDATE</li> <li>TEAL_FEATURE_LIBREOFFICE_CONVERT</li> <li>TEAL_FEATURE_APP_HEALTH</li> <li>TEAL_FEATURE_APP_METRICS</li> <li>TEAL_FEATURE_APP_INFO</li> </ul>"},{"location":"user_guide/#health-monitoring","title":"Health &amp; Monitoring","text":"<p>Teal provides several key endpoints for monitoring and information purposes. Below is a summary of each endpoint:</p> Endpoint Description <code>/app/health</code> This endpoint returns the health status of the application. It can be used to verify that the application is running properly and is capable of handling requests. <code>/app/metrics</code> This endpoint provides Prometheus metrics for the application. It can be used for gathering performance data and monitoring the application's usage statistics. <code>/app/info</code> This endpoint returns general information about the application, such as version number, build details, and other relevant metadata. <p>These endpoints are essential for maintaining the operational integrity and performance of the application, allowing for effective monitoring and troubleshooting.</p>"}]}